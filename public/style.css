<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Miroir | Human Truth Hub</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    html, body {
      margin: 0;
      padding: 0;
      font-family: 'Arial', sans-serif;
      background: #000;
      color: #fff;
      min-height: 100vh;
      overflow-x: hidden;
    }

    canvas {
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 0;
    }

    .container {
      position: relative;
      z-index: 1;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
      text-align: center;
    }

    .logo {
      width: 140px;
      animation: glow 3s ease-in-out infinite;
      filter: drop-shadow(0 0 10px #e50914);
      margin-bottom: 20px;
      user-select: none;
    }

    @keyframes glow {
      0%, 100% { filter: drop-shadow(0 0 10px #e50914); }
      50% { filter: drop-shadow(0 0 20px #ff1a1a); }
    }

    .quote {
      font-style: italic;
      font-size: 1.2rem;
      line-height: 1.6;
      color: #ddd;
      text-shadow: 0 0 8px #e50914;
      margin-bottom: 30px;
    }

    .cta-button {
      display: inline-block;
      padding: 14px 35px;
      background: transparent;
      border: 2px solid #e50914;
      border-radius: 30px;
      color: #e50914;
      font-size: 1.1rem;
      font-weight: bold;
      text-transform: uppercase;
      text-decoration: none;
      box-shadow: 0 0 10px #e50914;
      transition: all 0.3s ease;
      margin-bottom: 40px;
    }

    .cta-button:hover {
      background: #e50914;
      color: #fff;
      box-shadow: 0 0 25px #ff1a1a;
    }

    /* Floating hamburger toggle */
    .menu-toggle {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
      background: transparent;
      border: 2px solid #e50914;
      border-radius: 8px;
      padding: 8px;
      display: flex;
      flex-direction: column;
      gap: 5px;
      cursor: pointer;
      box-shadow: 0 0 10px #e50914;
    }

    .menu-toggle span {
      width: 24px;
      height: 2px;
      background: #e50914;
      display: block;
    }

    .menu {
      position: fixed;
      top: 70px;
      right: 20px;
      background: #111;
      border: 1px solid #e50914;
      border-radius: 10px;
      padding: 15px 20px;
      display: none;
      flex-direction: column;
      gap: 15px;
      z-index: 999;
      box-shadow: 0 0 20px #e50914;
    }

    .menu a {
      color: #fff;
      font-weight: 600;
      text-decoration: none;
      transition: color 0.2s ease;
    }

    .menu a:hover {
      color: #e50914;
    }

    /* Subtle animated background */
    body::before {
      content: "";
      position: fixed;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle at center, #e50914 0%, #000 70%);
      opacity: 0.05;
      animation: pulseBackground 10s ease-in-out infinite alternate;
      z-index: -1;
      pointer-events: none;
    }

    @keyframes pulseBackground {
      0% { opacity: 0.05; transform: scale(1); }
      100% { opacity: 0.15; transform: scale(1.05); }
    }
  </style>
</head>
<body>

<canvas id="bgCanvas"></canvas>

<!-- Hamburger -->
<div class="menu-toggle" onclick="toggleMenu()" aria-label="Toggle menu">
  <span></span>
  <span></span>
  <span></span>
</div>

<!-- Floating Menu -->
<div class="menu" id="mobileMenu">
  <a href="/about-miroir.html">About Miroir</a>
  <a href="/my-mirror.html">My Mirror</a>
  <a href="/our-voices.html">Our Voices</a>
  <a href="/truth-tools.html">Truth Tools</a>
  <a href="/living-archive.html">Living Archive</a>
  <a href="/performative-data.html">Performative Data</a>
  <a href="/publications.html">Publications</a>
</div>

<div class="container">
  <img src="/miroir.png" alt="Miroir Logo" class="logo" />
  <div class="quote">
    “A mirror does not lie. It reflects what society tries to erase: truth, memory, and the rebellion of being.”
  </div>
  <a href="/my-mirror.html" class="cta-button">Enter the Mirror</a>
</div>

<!-- Audio -->
<audio id="bgMusic" loop preload="auto">
  <source src="/relaxing-electronic-ambient-music-354471.mp3" type="audio/mpeg" />
</audio>

<!-- Music toggle -->
<button id="musicToggle" aria-label="Toggle music">
  <svg viewBox="0 0 24 24"><path d="M3 9v6h4l5 5V4L7 9H3z"></path></svg>
</button>

<script>
  function toggleMenu() {
    const menu = document.getElementById("mobileMenu");
    menu.style.display = menu.style.display === "flex" ? "none" : "flex";
  }

  const musicToggle = document.getElementById('musicToggle');
  const bgMusic = document.getElementById('bgMusic');
  let isPlaying = false;

  musicToggle.addEventListener('click', () => {
    isPlaying ? bgMusic.pause() : bgMusic.play();
    isPlaying = !isPlaying;
    musicToggle.innerHTML = isPlaying
      ? '<svg viewBox="0 0 24 24"><path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/></svg>'
      : '<svg viewBox="0 0 24 24"><path d="M3 9v6h4l5 5V4L7 9H3z"/></svg>';
  });

  // Particle animation
  const canvas = document.getElementById('bgCanvas');
  const ctx = canvas.getContext('2d');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  let particles = [];
  const colors = ['#e50914', '#ff1a1a', '#fff'];

  class Particle {
    constructor() { this.reset(); }
    reset() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.radius = Math.random() * 1.5 + 0.5;
      this.speedX = (Math.random() - 0.5) * 0.3;
      this.speedY = (Math.random() - 0.5) * 0.3;
      this.color = colors[Math.floor(Math.random() * colors.length)];
    }
    draw() {
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
      ctx.fillStyle = this.color;
      ctx.fill();
    }
    update() {
      this.x += this.speedX;
      this.y += this.speedY;
      if (this.x < 0 || this.x > canvas.width || this.y < 0 || this.y > canvas.height) this.reset();
    }
  }

  function initParticles() {
    for (let i = 0; i < 150; i++) {
      particles.push(new Particle());
    }
  }

  function animateParticles() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    particles.forEach(p => { p.update(); p.draw(); });
    requestAnimationFrame(animateParticles);
  }

  initParticles();
  animateParticles();

  window.addEventListener('resize', () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  });
</script>
</body>
</html>
