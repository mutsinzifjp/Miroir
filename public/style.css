<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Miroir | Human Truth Hub</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    html, body {
      margin: 0;
      padding: 0;
      font-family: 'Arial', sans-serif;
      background: #000;
      color: #fff;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      overflow-x: hidden;
    }

    canvas {
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 0;
    }

    .container {
      position: relative;
      z-index: 1;
      width: 90vw;
      max-width: 600px;
      text-align: center;
      padding: 20px;
      margin: 0 auto;
      flex: 1;
    }

    .logo {
      width: 140px;
      max-width: 60%;
      animation: glow 3s ease-in-out infinite;
      filter: drop-shadow(0 0 10px #e50914);
      margin-bottom: 20px;
      user-select: none;
    }

    @keyframes glow {
      0%, 100% { filter: drop-shadow(0 0 10px #e50914); }
      50% { filter: drop-shadow(0 0 20px #ff1a1a); }
    }

    .quote {
      font-size: 1.2rem;
      line-height: 1.5;
      color: #ddd;
      margin: 20px 0 30px;
      font-style: italic;
      user-select: none;
      text-shadow: 0 0 8px #e50914;
    }

    .cta-button {
      display: inline-block;
      padding: 14px 35px;
      background: transparent;
      border: 2px solid #e50914;
      border-radius: 30px;
      color: #e50914;
      font-size: 1.1rem;
      font-weight: bold;
      text-transform: uppercase;
      text-decoration: none;
      transition: all 0.3s ease;
      box-shadow: 0 0 10px #e50914;
      margin-bottom: 40px;
    }

    .cta-button:hover,
    .cta-button:focus {
      background: #e50914;
      color: #fff;
      box-shadow: 0 0 25px #ff1a1a;
      outline: none;
    }

    nav {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 20px;
      margin-bottom: 40px;
    }

    nav a {
      color: #fff;
      text-decoration: none;
      font-weight: 600;
      position: relative;
    }

    nav a::after {
      content: '';
      position: absolute;
      left: 0;
      bottom: -5px;
      height: 2px;
      width: 0;
      background: #e50914;
      transition: width 0.3s;
    }

    nav a:hover::after {
      width: 100%;
    }

    /* Publications */
    .publications-section {
      text-align: center;
      margin: 20px 0 40px;
    }

    .publications-section h2 {
      color: #e50914;
      text-shadow: 0 0 8px #e50914;
      font-size: 1.8rem;
    }

    .publication-link {
      display: inline-block;
      max-width: 200px;
      margin-top: 15px;
      border: 3px solid #e50914;
      border-radius: 10px;
      box-shadow: 0 0 20px #e50914;
      text-decoration: none;
      color: inherit;
    }

    .publication-link img {
      width: 100%;
      display: block;
      border-radius: 7px;
    }

    .publication-caption {
      padding: 10px;
      font-size: 1rem;
      font-weight: bold;
      color: #e50914;
      text-shadow: 0 0 8px #e50914;
    }

    /* Footer */
    footer {
      text-align: center;
      padding: 15px 10px;
      font-size: 0.9rem;
      color: #888;
      background: #000;
    }

    /* Background subtle animation */
    body::before {
      content: "";
      position: fixed;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle at center, #e50914 0%, #000 70%);
      opacity: 0.05;
      animation: pulseBackground 10s ease-in-out infinite alternate;
      z-index: -1;
      pointer-events: none;
    }

    @keyframes pulseBackground {
      0% { opacity: 0.05; transform: scale(1); }
      100% { opacity: 0.15; transform: scale(1.05); }
    }

    /* Music toggle */
    #musicToggle {
      position: fixed;
      bottom: 25px;
      right: 25px;
      background: #e50914;
      border-radius: 50%;
      width: 56px;
      height: 56px;
      border: none;
      cursor: pointer;
      box-shadow: 0 0 15px #ff1a1a;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: box-shadow 0.3s ease;
      z-index: 10;
    }

    #musicToggle:hover {
      box-shadow: 0 0 30px #ff1a1a;
    }

    #musicToggle svg {
      fill: #fff;
      width: 28px;
      height: 28px;
    }

    @media screen and (max-width: 500px) {
      .quote {
        font-size: 1rem;
      }

      .cta-button {
        padding: 10px 25px;
        font-size: 1rem;
      }

      .publications-section h2 {
        font-size: 1.4rem;
      }

      .publication-caption {
        font-size: 0.95rem;
      }
    }
  </style>
</head>
<body>

  <canvas id="bgCanvas"></canvas>

  <div class="container">
    <img src="/miroir.png" alt="Miroir Logo" class="logo" />
    <div class="quote">
      “A mirror does not lie. It reflects what society tries to erase, truth, memory, and the rebellion of being.”
    </div>
    <a href="/my-mirror.html" class="cta-button">Enter the Mirror</a>

    <nav>
      <a href="/about-miroir.html">About Miroir</a>
      <a href="/my-mirror.html">My Mirror</a>
      <a href="/our-voices.html">Our Voices</a>
      <a href="/truth-tools.html">Truth Tools</a>
      <a href="/living-archive.html">Living Archive</a>
      <a href="/performative-data.html">Performative Data</a>
      <a href="/publications.html">Publications</a>
    </nav>

    <section class="publications-section">
      <h2>Publications</h2>
      <a href="/publications.html" class="publication-link">
        <img src="/trianglecover.jpg" alt="The Triangle That Formed Me Cover" />
        <div class="publication-caption">The Triangle That Formed Me</div>
      </a>
    </section>
  </div>

  <footer>
    &copy; 2025 Fils Jean Pierre Mutsinzi | Miroir. All rights reserved.
  </footer>

  <audio id="bgMusic" loop preload="auto">
    <source src="/relaxing-electronic-ambient-music-354471.mp3" type="audio/mpeg" />
  </audio>

  <button id="musicToggle" aria-label="Toggle music">
    <svg viewBox="0 0 24 24"><path d="M3 9v6h4l5 5V4L7 9H3z"></path></svg>
  </button>

  <script>
    const musicToggle = document.getElementById('musicToggle');
    const bgMusic = document.getElementById('bgMusic');
    let isPlaying = false;

    musicToggle.addEventListener('click', () => {
      isPlaying ? bgMusic.pause() : bgMusic.play();
      isPlaying = !isPlaying;
      musicToggle.innerHTML = isPlaying
        ? '<svg viewBox="0 0 24 24"><path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"></path></svg>'
        : '<svg viewBox="0 0 24 24"><path d="M3 9v6h4l5 5V4L7 9H3z"></path></svg>';
    });

    // Particle background
    const canvas = document.getElementById('bgCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let particles = [];
    const colors = ['#e50914', '#ff1a1a', '#fff'];

    class Particle {
      constructor() { this.reset(); }
      reset() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.radius = Math.random() * 1.5 + 0.5;
        this.speedX = (Math.random() - 0.5) * 0.3;
        this.speedY = (Math.random() - 0.5) * 0.3;
        this.color = colors[Math.floor(Math.random() * colors.length)];
      }
      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
      }
      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        if (this.x < 0 || this.x > canvas.width || this.y < 0 || this.y > canvas.height) {
          this.reset();
        }
      }
    }

    function initParticles() {
      for (let i = 0; i < 150; i++) {
        particles.push(new Particle());
      }
    }

    function animateParticles() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particles.forEach(p => { p.update(); p.draw(); });
      requestAnimationFrame(animateParticles);
    }

    initParticles();
    animateParticles();

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });
  </script>
</body>
</html>
