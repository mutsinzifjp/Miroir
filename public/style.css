<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Miroir | Human Truth Hub</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    /* Reset and base */
    html, body {
      margin: 0;
      padding: 0;
      background: #000;
      color: #fff;
      font-family: Arial, sans-serif;
      height: 100%;
      overflow-y: auto; /* Allow vertical scroll */
    }

    body {
      /* Mobile default: no flex, scroll allowed */
      display: block;
      min-height: 100vh; /* Fill viewport */
      padding-bottom: 60px; /* Bottom space for scroll */
    }

    /* Container with padding and min height */
    .container {
      position: relative;
      z-index: 1;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px 15px 60px; /* bottom padding for scrolling */
      min-height: 100vh; /* fill full height */
      box-sizing: border-box;
      text-align: center;
    }

    /* Desktop: vertically center container */
    @media (min-width: 768px) {
      body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        padding-bottom: 0;
      }
      .container {
        min-height: auto;
        padding-bottom: 20px;
      }
    }

    /* Logo with glow animation */
    .logo {
      width: 140px;
      max-width: 60%;
      margin-bottom: 20px;
      animation: glow 3s ease-in-out infinite;
      filter: drop-shadow(0 0 10px #e50914);
      user-select: none;
    }

    @keyframes glow {
      0%, 100% {
        filter: drop-shadow(0 0 10px #e50914);
      }
      50% {
        filter: drop-shadow(0 0 20px #ff1a1a);
      }
    }

    /* Quote styling */
    .quote {
      font-size: 1.3rem;
      line-height: 1.6;
      color: #ddd;
      padding: 20px 10px;
      margin-bottom: 40px;
      font-style: italic;
      user-select: none;
      text-shadow: 0 0 8px #e50914;
      transition: color 0.4s ease;
    }
    .quote:hover {
      color: #ff1a1a;
      cursor: default;
    }

    /* Call to action button */
    .cta-button {
      display: inline-block;
      padding: 14px 40px;
      background: transparent;
      border: 2px solid #e50914;
      border-radius: 30px;
      color: #e50914;
      font-size: 1.2rem;
      font-weight: bold;
      text-transform: uppercase;
      cursor: pointer;
      text-decoration: none;
      transition: all 0.3s ease;
      box-shadow: 0 0 10px #e50914;
      user-select: none;
      margin-bottom: 40px;
    }
    .cta-button:hover,
    .cta-button:focus {
      background: #e50914;
      color: #fff;
      box-shadow: 0 0 25px #ff1a1a;
      outline: none;
    }

    /* Navigation bar */
    nav {
      margin-top: 50px;
      display: flex;
      flex-wrap: wrap;
      gap: 20px 35px;
      justify-content: center;
      font-weight: 700;
      font-size: 1.1rem;
      user-select: none;
      z-index: 2;
    }
    nav a {
      color: #fff;
      text-decoration: none;
      position: relative;
      padding-bottom: 6px;
      transition: color 0.3s ease;
    }
    nav a::after {
      content: '';
      position: absolute;
      left: 0;
      bottom: 0;
      height: 3px;
      width: 0;
      background: #e50914;
      border-radius: 2px;
      transition: width 0.3s ease;
    }
    nav a:hover, nav a:focus {
      color: #e50914;
    }
    nav a:hover::after, nav a:focus::after {
      width: 100%;
    }

    /* Publications section */
    .publications-section {
      margin-top: 50px;
      padding-bottom: 30px; /* breathing room */
    }
    .publications-section h2 {
      color: #e50914;
      font-size: 2rem;
      margin-bottom: 20px;
      text-shadow: 0 0 8px #e50914;
      user-select: none;
    }
    .publication-link {
      display: inline-block;
      max-width: 200px;
      cursor: pointer;
      border: 3px solid #e50914;
      border-radius: 10px;
      box-shadow: 0 0 25px #e50914;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      text-decoration: none;
      color: inherit;
    }
    .publication-link:hover {
      transform: scale(1.05);
      box-shadow: 0 0 40px #ff1a1a;
    }
    .publication-link img {
      width: 100%;
      height: auto;
      display: block;
      border-radius: 7px;
    }
    .publication-caption {
      color: #e50914;
      font-weight: bold;
      font-size: 1.1rem;
      margin-top: 12px;
      user-select: none;
      text-shadow: 0 0 8px #e50914;
      padding: 0 5px;
    }

    /* Background subtle animated gradient */
    body::before {
      content: "";
      position: fixed;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle at center, #e50914 0%, #000 70%);
      opacity: 0.05;
      animation: pulseBackground 10s ease-in-out infinite alternate;
      z-index: -1;
      pointer-events: none;
    }
    @keyframes pulseBackground {
      0% {
        opacity: 0.05;
        transform: scale(1);
      }
      100% {
        opacity: 0.15;
        transform: scale(1.05);
      }
    }

    /* Music toggle button */
    #musicToggle {
      position: fixed;
      bottom: 25px;
      right: 25px;
      background: #e50914;
      border-radius: 50%;
      width: 56px;
      height: 56px;
      border: none;
      cursor: pointer;
      box-shadow: 0 0 15px #ff1a1a;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: box-shadow 0.3s ease;
      z-index: 10;
      user-select: none;
    }
    #musicToggle:hover {
      box-shadow: 0 0 30px #ff1a1a;
    }
    #musicToggle svg {
      fill: #fff;
      width: 28px;
      height: 28px;
      pointer-events: none;
    }

    /* Responsive canvas */
    canvas#bgCanvas {
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 0;
    }

    /* Fix for iOS Safari viewport */
    @supports (-webkit-touch-callout: none) {
      body {
        height: -webkit-fill-available;
      }
    }
  </style>
</head>
<body>

  <canvas id="bgCanvas"></canvas>

  <div class="container" role="main" aria-label="Miroir homepage main content">
    <img src="/miroir.png" alt="" class="logo" />

    <div class="quote" aria-live="polite">
      “A mirror does not lie. It reflects what society tries to erase, truth, memory, and the rebellion of being.”
    </div>

    <a href="/my-mirror.html" class="cta-button" role="button" tabindex="0">Enter the Mirror</a>

    <nav aria-label="Primary Navigation">
      <a href="/about-miroir.html">About Miroir</a>
      <a href="/my-mirror.html">My Mirror</a>
      <a href="/our-voices.html">Our Voices</a>
      <a href="/truth-tools.html">Truth Tools</a>
      <a href="/living-archive.html">Living Archive</a>
      <a href="/performative-data.html">Performative Data</a>
      <a href="/publications.html">Publications</a>
    </nav>

    <section class="publications-section" aria-label="Latest Publications">
      <h2>Publications</h2>
      <a href="/publications.html" class="publication-link" title="View Publications">
        <img src="/trianglecover.jpg" alt="Cover of The Triangle That Formed Me" />
        <div class="publication-caption">The Triangle That Formed Me</div>
      </a>
    </section>
  </div>

  <!-- Background ambient music -->
  <audio id="bgMusic" loop preload="auto">
    <source src="/relaxing-electronic-ambient-music-354471.mp3" type="audio/mpeg" />
  </audio>

  <!-- Music toggle button -->
  <button id="musicToggle" aria-pressed="false" aria-label="Toggle background music" title="Play/Pause ambient music">
    <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
      <path d="M3 9v6h4l5 5V4L7 9H3z"></path>
    </svg>
  </button>

  <script>
    const musicToggle = document.getElementById('musicToggle');
    const bgMusic = document.getElementById('bgMusic');
    let isPlaying = false;

    musicToggle.addEventListener('click', () => {
      if (isPlaying) {
        bgMusic.pause();
        musicToggle.setAttribute('aria-pressed', 'false');
        musicToggle.innerHTML = `
          <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
            <path d="M3 9v6h4l5 5V4L7 9H3z"></path>
          </svg>`;
      } else {
        bgMusic.play();
        musicToggle.setAttribute('aria-pressed', 'true');
        musicToggle.innerHTML = `
          <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
            <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"></path>
          </svg>`;
      }
      isPlaying = !isPlaying;
    });

    // Responsive canvas setup for particles
    const canvas = document.getElementById('bgCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let particles = [];
    const colors = ['#e50914', '#ff1a1a', '#fff'];

    class Particle {
      constructor() {
        this.reset();
      }
      reset() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.radius = Math.random() * 1.5 + 0.5;
        this.speedX = (Math.random() - 0.5) * 0.3;
        this.speedY = (Math.random() - 0.5) * 0.3;
        this.color = colors[Math.floor(Math.random() * colors.length)];
      }
      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
      }
      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        if (this.x < 0 || this.x > canvas.width || this.y < 0 || this.y > canvas.height) {
          this.reset();
        }
      }
    }

    function initParticles() {
      for (let i = 0; i < 150; i++) {
        particles.push(new Particle());
      }
